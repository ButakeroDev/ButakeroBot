apiVersion: batch/v1
kind: Job
metadata:
  name: mongo-rs-init
spec:
  template:
    spec:
      containers:
      - name: mongo-rs-init
        image: mongo:8
        command:
        - /bin/sh
        - -c
        - |
          wait_for_mongo() {
            echo "esperamos a que el hijo de puta de mongodb, este disponible..."
            until mongosh --host mongo-0.mongodb-service-cluster:27017 --eval "print('wait')" 2>/dev/null; do
              echo "esperando conexi√≥n a MongoDB..."
              sleep 5
            done
          }

          wait_for_mongo

          echo "Iniciando replica set..."
          mongosh --host mongo-0.mongodb-service-cluster:27017 <<EOF
          try {
            rs.status();
          } catch(err) {
            if(err.codeName === "NotYetInitialized") {
              rs.initiate({
                _id: "rs0",
                members: [
                  { _id: 0, host: "mongo-0.mongodb-service-cluster:27017", priority: 2 },
                  { _id: 1, host: "mongo-1.mongodb-service-cluster:27017", priority: 1 },
                  { _id: 2, host: "mongo-2.mongodb-service-cluster:27017", priority: 1 }
                ]
              });
            }
          }
          EOF

          echo "Esperando a que el replica set este listo..."
          until mongosh --host mongo-0.mongodb-service-cluster:27017 --eval 'rs.status().ok' | grep -q 1; do
            echo "Esperando que el replica set este listo..."
            sleep 5
          done

          echo "Esperando al nodo primario..."
          until mongosh --host mongo-0.mongodb-service-cluster:27017 --eval 'rs.isMaster().ismaster' | grep -q true; do
            echo "Esperando al nodo primario..."
            sleep 5
          done

          echo "Creando usuario root..."
          mongosh --host mongo-0.mongodb-service-cluster:27017 <<EOF
          use admin;
          try {
            db.createUser({
              user: "$MONGO_INITDB_ROOT_USERNAME",
              pwd: "$MONGO_INITDB_ROOT_PASSWORD",
              roles: [{ role: "root", db: "admin" }]
            });
          } catch(err) {
            if(err.codeName !== "DuplicateKey") {
              throw err;
            }
          }
          EOF
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: MONGO_USER
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: MONGO_PASSWORD
      restartPolicy: OnFailure