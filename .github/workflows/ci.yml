name: Go Development Pipeline

on:
  push:
    branches:
      - master
    paths:
      - "**.go"
  pull_request:
    branches:
      - master
    paths:
      - "**.go"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          sudo apt-get update \
          && sudo apt-get install -y build-essential libopus-dev libopusfile-dev \
          && go install github.com/bwmarrin/dca/cmd/dca@latest \
          && sudo apt-get install -y ffmpeg wget libopusfile0 \
          && export YT_DLP_VERSION="2023.10.13" \
          && wget "https://github.com/yt-dlp/yt-dlp/releases/download/${YT_DLP_VERSION}/yt-dlp_linux" -O /usr/local/bin/yt-dlp \
          && sudo chmod +x /usr/local/bin/yt-dlp
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: v1.57

      - name: Build and test
        run: |
          make build
          make test

      - name: Generate coverage report
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
      - name: Post coverage comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');

            const owner = core.getInput('repo.owner');
            const repo = core.getInput('repo.repo');
            const pull_number = core.getInput('pull_number');
            const coverage_path = core.artifactPath('coverage-report');

            const fs = require('fs');
            const coverage = fs.readFileSync(coverage_path, 'utf8');
            const match = coverage.match(/coverage: ([0-9]+)\%/)
            const coverage_percentage = parseInt(match[1]);

            const commit_id = core.getInput('head_sha');

            const client = new github.getOctokit(core.secrets.GITHUB_TOKEN);
            client.issues
